const twilio = require('twilio');
const { generateOTP } = require('../utils/otp');
const redisClient = require('../config/redis');

// Kh·ªüi t·∫°o Twilio client v·ªõi th√¥ng tin t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const client = twilio(
    process.env.TWILIO_ACCOUNT_SID,
    process.env.TWILIO_AUTH_TOKEN
);

// Format s·ªë ƒëi·ªán tho·∫°i
const formatPhoneNumber = (phone) => {
    // X√≥a t·∫•t c·∫£ kho·∫£ng tr·∫Øng v√† d·∫•u +
    phone = phone.replace(/\s+/g, '').replace('+', '');
    
    // N·∫øu s·ªë b·∫Øt ƒë·∫ßu b·∫±ng 0, thay th·∫ø b·∫±ng 84
    if (phone.startsWith('0')) {
        phone = '84' + phone.substring(1);
    }
    
    // N·∫øu s·ªë ch∆∞a c√≥ 84 ·ªü ƒë·∫ßu, th√™m v√†o
    if (!phone.startsWith('84')) {
        phone = '84' + phone;
    }
    
    return '+' + phone;
};

// G·ª≠i OTP qua SMS
const sendOTP = async (phone) => {
    try {
        // T·∫°o m√£ OTP
        const otp = generateOTP();
        
        // Log OTP cho m·ª•c ƒë√≠ch debug
        console.log('\n=== OTP Information ===');
        console.log('üì± S·ªë ƒëi·ªán tho·∫°i:', phone);
        console.log('üîë M√£ OTP:', otp);
        console.log('=====================\n');

        // Format s·ªë ƒëi·ªán tho·∫°i
        const formattedPhone = formatPhoneNumber(phone);

        // L∆∞u OTP v√†o Redis v·ªõi th·ªùi gian h·∫øt h·∫°n 5 ph√∫t
        try {
            await redisClient.set(`otp:${phone}`, otp, 'EX', 300);
            console.log('ƒê√£ l∆∞u OTP v√†o Redis');
        } catch (redisError) {
            console.error('L·ªói khi l∆∞u OTP v√†o Redis:', redisError);
            throw new Error('L·ªói l∆∞u tr·ªØ OTP');
        }

        // G·ª≠i SMS qua Twilio
        const message = `[ZaloLite] Ma xac thuc cua ban la: ${otp}\n\nMa co hieu luc trong 5 phut. KHONG chia se ma nay voi bat ky ai.`;
        
        const response = await client.messages.create({
            body: message,
            from: process.env.TWILIO_TRIAL_NUMBER,
            to: formattedPhone
        });

        console.log('ƒê√£ g·ª≠i SMS th√†nh c√¥ng. Message SID:', response.sid);
        return true;
    } catch (error) {
        console.error('L·ªói chi ti·∫øt khi g·ª≠i OTP:', error);
        throw new Error('G·ª≠i OTP th·∫•t b·∫°i: ' + error.message);
    }
};

// X√°c th·ª±c OTP
const verifyOTP = async (phone, inputOTP) => {
    try {
        // L·∫•y OTP t·ª´ Redis
        const storedOTP = await redisClient.get(`otp:${phone}`);
        console.log('Stored OTP:', storedOTP, 'Input OTP:', inputOTP);

        if (!storedOTP) {
            console.log('Kh√¥ng t√¨m th·∫•y OTP trong Redis');
            return false;
        }

        // So s√°nh OTP
        const isValid = inputOTP === storedOTP;
        console.log('OTP valid:', isValid);

        if (isValid) {
            // X√≥a OTP ƒë√£ s·ª≠ d·ª•ng
            await redisClient.del(`otp:${phone}`);
            console.log('ƒê√£ x√≥a OTP kh·ªèi Redis');
        }

        return isValid;
    } catch (error) {
        console.error('L·ªói khi x√°c th·ª±c OTP:', error);
        throw new Error('X√°c th·ª±c OTP th·∫•t b·∫°i');
    }
};

module.exports = {
    sendOTP,
    verifyOTP
}; 